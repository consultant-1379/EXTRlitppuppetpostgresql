diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/README.md ../../target/puppet/postgresql_litp/README.md
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/README.md	2023-06-12 11:40:14.114702000 +0100
+++ ../../target/puppet/postgresql_litp/README.md	2023-06-12 11:39:31.013000000 +0100
@@ -69,7 +69,7 @@ For a more customized configuration:
       ip_mask_allow_all_users    => '0.0.0.0/0',
       listen_addresses           => '*',
       ipv4acls                   => ['hostssl all johndoe 192.168.0.0/24 cert'],
-      postgres_password          => 'TPSrep0rt!',
+      postgres_password          => 'md55305adaac499dbbc6865a44e4aa5d8b4',
     }
 
 Once you've completed your configuration of `postgresql_litp::server`, you can test out your settings from the command line:
@@ -381,6 +381,8 @@ The following list are options that you
 
 ####`postgres_password`
 This value defaults to `undef`, meaning the super user account in the postgres database is a user called `postgres` and this account does not have a password. If you provide this setting, the module will set the password for the `postgres` user to your specified value.
+The value specified should be a hash, generated by using:
+ $ puppet apply --execute 'notify { "test": message => postgresql_password("username", "password") }'
 
 ####`package_name`
 The name of the package to use for installing the server software. Defaults to the default for your OS distro.
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/facter/logging_connections.rb ../../target/puppet/postgresql_litp/lib/facter/logging_connections.rb
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/facter/logging_connections.rb	1970-01-01 01:00:00.000000000 +0100
+++ ../../target/puppet/postgresql_litp/lib/facter/logging_connections.rb	2023-06-12 11:39:31.028000000 +0100
@@ -0,0 +1,22 @@
+require 'facter'
+
+litp_available = false
+if Facter.value(:puppet_master) == 'true'
+  Facter::Util::Resolution.exec("systemctl status litpd.service")
+  if $?.exitstatus == 0
+    litp_available = true
+  end
+end
+
+Facter.add(:postgres_logging_connections) do
+  setcode do
+    logging_value = Facter::Util::Resolution.exec("/bin/grep '^\s*log_connections\s\\+=\s\\+\\w\\+\s*\$' /var/opt/rh/rh-postgresql96/lib/pgsql/data/postgresql.conf 2> /dev/null | /bin/awk '{print $3}'")
+    if litp_available
+      logging_value = Facter::Util::Resolution.exec("/bin/echo -e 'GET /litp/rest/v1/litp/logging HTTP/1.0\\r\\nAuthorization: Basic cm9vdDo=\\r\\n\\r\\n' | /usr/bin/nc -U /var/run/litpd/litpd.sock | /bin/grep -oh '\"force_postgres_debug\"\\s*:\\s*\"\\w*\"' 2> /dev/null | tr -d '\"' | /bin/awk -F ': ' '{print $2}'| /bin/sed -e 's/true/on/; s/false/off/'")
+    end
+    if logging_value.to_s.empty?
+      logging_value = 'off'
+    end
+    logging_value
+  end
+end
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/puppet/provider/postgresql_litp_psql/ruby.rb ../../target/puppet/postgresql_litp/lib/puppet/provider/postgresql_litp_psql/ruby.rb
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/puppet/provider/postgresql_litp_psql/ruby.rb	2023-06-12 11:40:13.962723000 +0100
+++ ../../target/puppet/postgresql_litp/lib/puppet/provider/postgresql_litp_psql/ruby.rb	2023-06-12 11:39:31.033000000 +0100
@@ -14,20 +14,21 @@ Puppet::Type.type(:postgresql_litp_psql)
     command = [resource[:psql_path]]
     command.push("-d", resource[:db]) if resource[:db]
     command.push("-p", resource[:port]) if resource[:port]
+    command.push("-h", resource[:db_hostname]) if resource[:db_hostname]
     command.push("-t", "-c", sql)
 
     if resource[:cwd]
       Dir.chdir resource[:cwd] do
-        run_command(command, resource[:psql_user], resource[:psql_group])
+        run_command(command, resource[:psql_user], resource[:psql_group], resource[:env])
       end
     else
-      run_command(command, resource[:psql_user], resource[:psql_group])
+      run_command(command, resource[:psql_user], resource[:psql_group], resource[:env])
     end
   end
 
   private
 
-  def run_command(command, user, group)
+  def run_command(command, user, group, env)
     if Puppet::PUPPETVERSION.to_f < 3.4
       Puppet::Util::SUIDManager.run_and_capture(command, user, group)
     else
@@ -37,7 +38,7 @@ Puppet::Type.type(:postgresql_litp_psql)
         :failonfail         => false,
         :combine            => true,
         :override_locale    => true,
-        :custom_environment => {}
+        :custom_environment => env
       })
       [output, $CHILD_STATUS.dup]
     end
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/puppet/type/postgresql_litp_psql.rb ../../target/puppet/postgresql_litp/lib/puppet/type/postgresql_litp_psql.rb
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/lib/puppet/type/postgresql_litp_psql.rb	2023-06-12 11:40:13.969758000 +0100
+++ ../../target/puppet/postgresql_litp/lib/puppet/type/postgresql_litp_psql.rb	2023-06-12 11:39:31.043000000 +0100
@@ -87,6 +87,16 @@ Puppet::Type.newtype(:postgresql_litp_ps
     newvalues(:true, :false)
   end
 
+  newparam(:db_hostname) do
+    desc "The server hostname against which the psql command should be executed."
+    defaultto(Puppet[:server])
+  end
+
+  newparam(:env) do
+    desc "Environment variables to be used when running the sql command"
+    defaultto({PGSSLMODE: "verify-full"})
+  end
+
   def should_run_sql(refreshing = false)
     unless_param = @parameters[:unless]
     return false if !unless_param.nil? && !unless_param.value.nil? && unless_param.matches(unless_param.value)
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/globals.pp ../../target/puppet/postgresql_litp/manifests/globals.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/globals.pp	2023-06-12 11:40:13.980733000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/globals.pp	2023-06-12 11:39:31.048000000 +0100
@@ -44,7 +44,8 @@ class postgresql_litp::globals (
   $manage_pg_hba_conf   = undef,
   $manage_pg_ident_conf = undef,
 
-  $manage_package_repo  = undef
+  $manage_package_repo  = undef,
+  $ssl_cert_dir         = undef
 ) {
   # We are determining this here, because it is needed by the package repo
   # class.
@@ -102,6 +103,10 @@ class postgresql_litp::globals (
     '91'    => '1.5',
     '9.2'   => '2.0',
     '9.3'   => '2.1',
+    '93'    => '2.1',
+    '9.4'   => '2.1',
+    '9.5'   => '2.2',
+    '9.6'   => '2.3',
     default => undef,
   }
   $globals_postgis_version = pick($postgis_version, $default_postgis_version)
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/params.pp ../../target/puppet/postgresql_litp/manifests/params.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/params.pp	2023-06-12 11:40:13.995714000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/params.pp	2023-06-12 11:39:31.052000000 +0100
@@ -2,9 +2,15 @@
 class postgresql_litp::params inherits postgresql_litp::globals {
   $version                    = $globals_version
   $postgis_version            = $globals_postgis_version
-  $listen_addresses           = 'localhost'
+  $listen_addresses           = '127.0.0.1'
   $port                       = 5432
+  $log_destination            = 'syslog'
+  $logging_enabled            = 'on'
+  $logging_collector          = 'off'
+  $logging_connections        = $postgres_logging_connections
+  $log_line_prefix            = ''
   $ip_mask_deny_postgres_user = '0.0.0.0/0'
+  $ipv6_mask_deny_all_users   = '::/0'
   $ip_mask_allow_all_users    = '127.0.0.1/32'
   $ipv4acls                   = []
   $ipv6acls                   = []
@@ -16,6 +22,13 @@ class postgresql_litp::params inherits p
   $manage_pg_hba_conf         = pick($manage_pg_hba_conf, true)
   $manage_pg_ident_conf       = pick($manage_pg_ident_conf, true)
   $package_ensure             = 'present'
+  $ssl                        = 'on'
+  $ssl_ca_file                = "${ssl_cert_dir}/ca.crt"
+  $ssl_key_file               = "${ssl_cert_dir}/server.key"
+  $ssl_cert_file              = "${ssl_cert_dir}/server.crt"
+  $database_hostname          = "$litp::ms_node::ms_hostname"
+  $psql_ssl_mode              = 'verify-full'
+  $ssl_ciphers                = 'TLSv1.2:!MEDIUM:!aNULL'
 
   # Amazon Linux's OS Family is 'Linux', operating system 'Amazon'.
   case $::osfamily {
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/config.pp ../../target/puppet/postgresql_litp/manifests/server/config.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/config.pp	2023-06-12 11:40:14.009673000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/config.pp	2023-06-12 11:39:31.056000000 +0100
@@ -4,6 +4,12 @@ class postgresql_litp::server::config {
   $ip_mask_allow_all_users    = $postgresql_litp::server::ip_mask_allow_all_users
   $listen_addresses           = $postgresql_litp::server::listen_addresses
   $port                       = $postgresql_litp::server::port
+  $log_destination            = $postgresql_litp::server::log_destination
+  $log_connections            = $postgresql_litp::server::log_connections
+  $log_disconnections         = $postgresql_litp::server::log_disconnections
+  $log_hostname               = $postgresql_litp::server::log_hostname
+  $logging_collector          = $postgresql_litp::server::logging_collector
+  $log_line_prefix            = $postgresql_litp::server::log_line_prefix
   $ipv4acls                   = $postgresql_litp::server::ipv4acls
   $ipv6acls                   = $postgresql_litp::server::ipv6acls
   $pg_hba_conf_path           = $postgresql_litp::server::pg_hba_conf_path
@@ -15,6 +21,12 @@ class postgresql_litp::server::config {
   $version                    = $postgresql_litp::server::_version
   $manage_pg_hba_conf         = $postgresql_litp::server::manage_pg_hba_conf
   $manage_pg_ident_conf       = $postgresql_litp::server::manage_pg_ident_conf
+  $ipv6_mask_deny_all_users   = $postgresql_litp::server::ipv6_mask_deny_all_users
+  $ssl                        = $postgresql_litp::server::ssl
+  $ssl_ca_file                = $postgresql_litp::server::ssl_ca_file
+  $ssl_cert_file              = $postgresql_litp::server::ssl_cert_file
+  $ssl_key_file               = $postgresql_litp::server::ssl_key_file
+  $ssl_ciphers                = $postgresql_litp::server::ssl_ciphers
 
   if ($manage_pg_hba_conf == true) {
     # Prepare the main pg_hba file
@@ -37,32 +49,39 @@ class postgresql_litp::server::config {
         '8.1'   => 'sameuser',
         default => undef,
       }
-      postgresql_litp::server::pg_hba_rule { 'local access as postgres user':
-        type        => 'local',
-        user        => $user,
-        auth_method => 'ident',
-        auth_option => $local_auth_option,
-        order       => '001',
-      }
-      postgresql_litp::server::pg_hba_rule { 'local access to database with same name':
+      postgresql_litp::server::pg_hba_rule { 'local access as postgres user to postgres db':
         type        => 'local',
+        user        =>  $user,
         auth_method => 'ident',
         auth_option => $local_auth_option,
-        order       => '002',
+        database    => 'postgres',
+        order       => '050',
       }
-      postgresql_litp::server::pg_hba_rule { 'allow localhost TCP access to postgresql user':
+
+      postgresql_litp::server::pg_hba_rule { 'deny all users access to all databases from any IPv4 network address using tcp connections':
         type        => 'host',
-        user        => $user,
-        address     => '127.0.0.1/32',
-        auth_method => 'md5',
-        order       => '003',
+        database    => 'all',
+        user        => 'all',
+        auth_method => 'reject',
+        address     => $ip_mask_deny_postgres_user,
+        order       => '060',
       }
-      postgresql_litp::server::pg_hba_rule { 'deny access to postgresql user':
+      postgresql_litp::server::pg_hba_rule { 'deny all users access to all databases from any IPv6 network address using tcp connections':
         type        => 'host',
-        user        => $user,
-        address     => $ip_mask_deny_postgres_user,
+        database    => 'all',
+        user        => 'all',
         auth_method => 'reject',
-        order       => '004',
+        address     => $ipv6_mask_deny_all_users,
+        order       => '061',
+      }
+
+      postgresql_litp::server::pg_hba_rule { 'hostssl access as postgres user':
+        type        => 'hostssl',
+        user        => $user,
+        auth_method => 'cert',
+        auth_option => 'clientcert=1',
+        address     => '127.0.0.1/32',
+        order       => '020',
       }
 
       # ipv4acls are passed as an array of rule strings, here we transform
@@ -71,19 +90,6 @@ class postgresql_litp::server::config {
       'ipv4acls', 10)
       create_resources('postgresql_litp::server::pg_hba_rule', $ipv4acl_resources)
 
-      postgresql_litp::server::pg_hba_rule { 'allow access to all users':
-        type        => 'host',
-        address     => $ip_mask_allow_all_users,
-        auth_method => 'md5',
-        order       => '100',
-      }
-      postgresql_litp::server::pg_hba_rule { 'allow access to ipv6 localhost':
-        type        => 'host',
-        address     => '::1/128',
-        auth_method => 'md5',
-        order       => '101',
-      }
-
       # ipv6acls are passed as an array of rule strings, here we transform
       # them into a resources hash, and pass the result to create_resources
       $ipv6acl_resources = postgresql_acls_to_resources_hash($ipv6acls,
@@ -100,6 +106,44 @@ class postgresql_litp::server::config {
   postgresql_litp::server::config_entry { 'port':
     value => $port,
   }
+  postgresql_litp::server::config_entry { 'log_destination':
+    value => $log_destination,
+  }
+  postgresql_litp::server::config_entry { 'log_connections':
+    value => $log_connections,
+  }
+  postgresql_litp::server::config_entry { 'log_disconnections':
+    value => $log_disconnections,
+  }
+  postgresql_litp::server::config_entry { 'log_hostname':
+    value => $log_hostname,
+  }
+  postgresql_litp::server::config_entry { 'logging_collector':
+    value => $logging_collector,
+  }
+  postgresql_litp::server::config_entry { 'log_line_prefix':
+    value => $log_line_prefix,
+  }
+  
+  postgresql_litp::server::config_entry { 'ssl':
+    value => $ssl,
+  }
+ 
+  postgresql_litp::server::config_entry { 'ssl_ca_file':
+    value => $ssl_ca_file,
+  }
+
+  postgresql_litp::server::config_entry { 'ssl_cert_file':
+    value => $ssl_cert_file,
+  }
+
+  postgresql_litp::server::config_entry { 'ssl_key_file':
+    value => $ssl_key_file,
+  }
+
+  postgresql_litp::server::config_entry { 'ssl_ciphers':
+    value => $ssl_ciphers,
+  }
 
   # RedHat-based systems hardcode some PG* variables in the init script, and need to be overriden
   # in /etc/sysconfig/pgsql/postgresql. Create a blank file so we can manage it with augeas later.
@@ -108,6 +152,11 @@ class postgresql_litp::server::config {
       ensure  => present,
       replace => false,
     }
+    file { '/etc/sysconfig/pgsql/':
+      ensure  => directory,
+      owner   => root,
+      before  => File['/etc/sysconfig/pgsql/postgresql']
+    }
   }
 
   if ($manage_pg_ident_conf == true) {
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/config_entry.pp ../../target/puppet/postgresql_litp/manifests/server/config_entry.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/config_entry.pp	2023-06-12 11:40:14.012695000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/config_entry.pp	2023-06-12 11:39:31.067000000 +0100
@@ -52,7 +52,7 @@ define postgresql_litp::server::config_e
       if $name == 'port' {
         file { 'systemd-port-override':
           ensure  => present,
-          path    => '/etc/systemd/system/postgresql.service',
+          path    => "/etc/systemd/system/${::postgresql_litp::server::service_name}.service",
           owner   => root,
           group   => root,
           content => template('postgresql_litp/systemd-port-override.erb'),
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/database.pp ../../target/puppet/postgresql_litp/manifests/server/database.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/database.pp	2023-06-12 11:40:14.019736000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/database.pp	2023-06-12 11:39:31.071000000 +0100
@@ -15,6 +15,7 @@ define postgresql_litp::server::database
   $port          = $postgresql_litp::server::port
   $version       = $postgresql_litp::server::_version
   $default_db    = $postgresql_litp::server::default_database
+  $database_hostname = $postgresql_litp::server::database_hostname
 
   # Set the defaults for the postgresql_litp_psql resource
   Postgresql_litp_psql {
@@ -47,7 +48,7 @@ define postgresql_litp::server::database
     default => "--tablespace='${tablespace}' ",
   }
 
-  $createdb_command = "${createdb_path} --port='${port}' --owner='${owner}' --template=${template} ${encoding_option}${locale_option}${tablespace_option} '${dbname}'"
+  $createdb_command = "${createdb_path} --host='${database_hostname}' --port='${port}' --owner='${owner}' --template=${template} ${encoding_option}${locale_option}${tablespace_option} '${dbname}'"
 
   postgresql_litp_psql { "Check for existence of db '${dbname}'":
     command => 'SELECT 1',
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/extension.pp ../../target/puppet/postgresql_litp/manifests/server/extension.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/extension.pp	1970-01-01 01:00:00.000000000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/extension.pp	2023-06-12 11:39:31.074000000 +0100
@@ -0,0 +1,48 @@
+# Activate an extension on a postgresql database
+define postgresql_litp::server::extension (
+  $database,
+  $ensure = 'present',
+  $package_name = undef,
+  $package_ensure = undef,
+) {
+  case $ensure {
+    'present': {
+      $command = "CREATE EXTENSION ${name}"
+      $unless_comp = '='
+      $package_require = undef
+      $package_before = Postgresql_litp_psql["Add ${title} extension to ${database}"]
+    }
+
+    'absent': {
+      $command = "DROP EXTENSION ${name}"
+      $unless_comp = '!='
+      $package_require = Postgresql_litp_psql["Add ${title} extension to ${database}"]
+      $package_before = undef
+    }
+
+    default: {
+      fail("Unknown value for ensure '${ensure}'.")
+    }
+  }
+
+  postgresql_litp_psql {"Add ${title} extension to ${database}":
+    db      => $database,
+    command => $command,
+    unless  => "SELECT t.count FROM (SELECT count(extname) FROM pg_extension WHERE extname = '${name}') as t WHERE t.count ${unless_comp} 1",
+    require => Postgresql_litp::Server::Database[$database],
+  }
+
+  if $package_name {
+    $_package_ensure = $package_ensure ? {
+      undef   => $ensure,
+      default => $package_ensure,
+    }
+
+    package { "Postgresql extension ${title}":
+      ensure  => $_package_ensure,
+      name    => $package_name,
+      tag     => 'postgresql',
+      require => $package_require,
+    }
+  }
+}
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/passwd.pp ../../target/puppet/postgresql_litp/manifests/server/passwd.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/passwd.pp	2023-06-12 11:40:14.041675000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/passwd.pp	2023-06-12 11:39:31.077000000 +0100
@@ -4,6 +4,8 @@ class postgresql_litp::server::passwd {
   $user              = $postgresql_litp::server::user
   $group             = $postgresql_litp::server::group
   $psql_path         = $postgresql_litp::server::psql_path
+  $database_host     = $postgresql_litp::server::database_hostname
+  $ssl_mode          = $postgresql_litp::server::psql_ssl_mode
 
   if ($postgres_password != undef) {
     # NOTE: this password-setting logic relies on the pg_hba.conf being
@@ -11,21 +13,20 @@ class postgresql_litp::server::passwd {
     #  without specifying a password ('ident' or 'trust' security). This is
     #  the default for pg_hba.conf.
     $escaped = postgresql_escape($postgres_password)
-    $env = "env PGPASSWORD='${postgres_password}'"
+    $env = "env PGSSLMODE='${ssl_mode}'"
     exec { 'set_postgres_postgrespw':
       # This command works w/no password because we run it as postgres system
       # user
-      command     => "${psql_path} -c 'ALTER ROLE \"${user}\" PASSWORD ${escaped}'",
+      command     => "${env} ${psql_path} -h ${database_host} -c 'ALTER ROLE \"${user}\" PASSWORD ${escaped}'",
       user        => $user,
       group       => $group,
       logoutput   => true,
       cwd         => '/tmp',
-      # With this command we're passing -h to force TCP authentication, which
-      # does require a password.  We specify the password via the PGPASSWORD
-      # environment variable. If the password is correct (current), this
-      # command will exit with an exit code of 0, which will prevent the main
-      # command from running.
-      unless      => "${env} ${psql_path} -h localhost -c 'select 1' > /dev/null",
+      # Will exit with 0 if the current password is already set and prevent the
+      # main command from running.
+      unless  => "${env} ${psql_path} -h ${database_host}  -c \"SELECT 'YES' AS pass_ok FROM pg_authid WHERE rolname='${user}' \
+                  AND rolpassword='${postgres_password}';\" \
+                  | grep -sq YES",
       path        => '/usr/bin:/usr/local/bin:/bin',
     }
   }
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/service.pp ../../target/puppet/postgresql_litp/manifests/server/service.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server/service.pp	2023-06-12 11:40:14.084855000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server/service.pp	2023-06-12 11:39:31.081000000 +0100
@@ -8,6 +8,9 @@ class postgresql_litp::server::service {
   $user             = $postgresql_litp::server::user
   $port             = $postgresql_litp::server::port
   $default_database = $postgresql_litp::server::default_database
+  $database_hostname= $postgresql_litp::server::database_hostname
+  $psql_ssl_mode    = $postgresql_litp::server::psql_ssl_mode
+
 
   anchor { 'postgresql_litp::server::service::begin': }
 
@@ -27,6 +30,7 @@ class postgresql_litp::server::service {
     # Without it, we may continue doing more work before the database is
     # prepared leading to a nasty race condition.
     postgresql_litp::validate_db_connection { 'validate_service_is_running':
+      database_host   => $database_hostname,
       run_as          => $user,
       database_name   => $default_database,
       database_port   => $port,
@@ -34,7 +38,8 @@ class postgresql_litp::server::service {
       tries           => 60,
       create_db_first => false,
       require         => Service['postgresqld'],
-      before          => Anchor['postgresql_litp::server::service::end']
+      before          => Anchor['postgresql_litp::server::service::end'],
+      ssl_mode        => $psql_ssl_mode,
     }
   }
 
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server.pp ../../target/puppet/postgresql_litp/manifests/server.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/server.pp	2023-06-12 11:40:14.094702000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/server.pp	2023-06-12 11:39:31.085000000 +0100
@@ -17,6 +17,12 @@ class postgresql_litp::server (
 
   $listen_addresses           = $postgresql_litp::params::listen_addresses,
   $port                       = $postgresql_litp::params::port,
+  $log_destination            = $postgresql_litp::params::log_destination,
+  $log_connections            = $postgresql_litp::params::logging_connections,
+  $log_disconnections         = $postgresql_litp::params::logging_connections,
+  $log_hostname               = $postgresql_litp::params::logging_enabled,
+  $logging_collector          = $postgresql_litp::params::logging_collector,
+  $log_line_prefix            = $postgresql_litp::params::log_line_prefix,
   $ip_mask_deny_postgres_user = $postgresql_litp::params::ip_mask_deny_postgres_user,
   $ip_mask_allow_all_users    = $postgresql_litp::params::ip_mask_allow_all_users,
   $ipv4acls                   = $postgresql_litp::params::ipv4acls,
@@ -44,6 +50,14 @@ class postgresql_litp::server (
 
   $manage_pg_hba_conf         = $postgresql_litp::params::manage_pg_hba_conf,
   $manage_pg_ident_conf       = $postgresql_litp::params::manage_pg_ident_conf,
+  $ipv6_mask_deny_all_users   = $postgresql_litp::params::ipv6_mask_deny_all_users,
+  $ssl                        = $postgresql_litp::params::ssl,
+  $ssl_ca_file                = $postgresql_litp::params::ssl_ca_file,
+  $database_hostname          = $postgresql_litp::params::database_hostname,
+  $psql_ssl_mode              = $postgresql_litp::params::psql_ssl_mode,
+  $ssl_cert_file              = $postgresql_litp::params::ssl_cert_file,
+  $ssl_key_file               = $postgresql_litp::params::ssl_key_file,
+  $ssl_ciphers                = $postgresql_litp::params::ssl_ciphers,
 
   #Deprecated
   $version                    = undef,
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/validate_db_connection.pp ../../target/puppet/postgresql_litp/manifests/validate_db_connection.pp
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/manifests/validate_db_connection.pp	2023-06-12 11:40:14.097685000 +0100
+++ ../../target/puppet/postgresql_litp/manifests/validate_db_connection.pp	2023-06-12 11:39:31.089000000 +0100
@@ -12,7 +12,8 @@ define postgresql_litp::validate_db_conn
   $run_as            = undef,
   $sleep             = 2,
   $tries             = 10,
-  $create_db_first   = true
+  $create_db_first   = true,
+  $ssl_mode          = undef 
 ) {
   require postgresql_litp::client
   include postgresql_litp::params
@@ -36,10 +37,19 @@ define postgresql_litp::validate_db_conn
     undef   => "--dbname ${postgresql_litp::params::default_database} ",
     default => "--dbname ${database_name} ",
   }
-  $env = $database_password ? {
-    undef   => undef,
-    default => "PGPASSWORD=${database_password}",
+  if $database_password and $ssl_mode {
+   $env="PGPASSWORD=${database_password} PGSSLMODE=${ssl_mode}"
   }
+  elsif $database_password and !$ssl_mode {
+   $env="PGPASSWORD=${database_password}"
+  }
+  elsif !$database_password and $ssl_mode {
+   $env="PGSSLMODE=${ssl_mode}"
+  }
+  else {
+   $env=undef
+  }  
+
   $cmd = join([$cmd_init, $cmd_host, $cmd_user, $cmd_port, $cmd_dbname])
   $validate_cmd = "/usr/local/bin/validate_postgresql_connection.sh ${sleep} ${tries} '${cmd}'"
 
diff -rupN ../../../target/deps/puppetlabs-postgresql-4.0.0/templates/systemd-port-override.erb ../../target/puppet/postgresql_litp/templates/systemd-port-override.erb
--- ../../../target/deps/puppetlabs-postgresql-4.0.0/templates/systemd-port-override.erb	2023-06-12 11:40:14.361717000 +0100
+++ ../../target/puppet/postgresql_litp/templates/systemd-port-override.erb	2023-06-12 11:39:31.107000000 +0100
@@ -1,3 +1,3 @@
-.include /lib/systemd/system/postgresql.service
+.include /usr/lib/systemd/system/<%= @service_name %>.service
 [Service]
 Environment=PGPORT=<%= @value %>
